package com.example.datn.Controller;


import com.example.datn.Config.JwtUtil;
import com.example.datn.DTO.DonHang.ImeiResponseDTO;
import com.example.datn.DTO.DonHang.XacNhanDonHangRequestDTO;
import com.example.datn.DTO.TrangMuaHang.DonHangRequestDTO;
import com.example.datn.DTO.TrangMuaHang.DonHangResponseDTO;

import com.example.datn.Repository.UsersRepository;
import com.example.datn.Service.DonHangService;
import io.jsonwebtoken.Jwts;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/donhang")
@RequiredArgsConstructor
public class DonHangController {

    private final DonHangService donHangService;

    private final UsersRepository usersRepository;

    // T·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng c·ªßa user
    @PostMapping("/create")
    public ResponseEntity<DonHangResponseDTO> taoDonHang(
            @RequestHeader("Authorization") String authHeader,
            @RequestBody DonHangRequestDTO request) {
        String token = authHeader.startsWith("Bearer ") ? authHeader.substring(7) : authHeader;
        DonHangResponseDTO response = donHangService.taoDonHang(token, request);
        return ResponseEntity.ok(response);
    }
    private  final JwtUtil jwtUtil ;
    // üîπ H√†m ti·ªán √≠ch: l·∫•y username t·ª´ token
    private String getUsernameFromToken(String authorizationHeader) {
        String token = authorizationHeader.startsWith("Bearer ")
                ? authorizationHeader.substring(7)
                : authorizationHeader;

        return Jwts.parserBuilder()
                .setSigningKey(jwtUtil.getSecretKey())
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    // ================== API cho User ==================



    // Trong DonHangController.java

    // L·∫•y danh s√°ch ƒë∆°n h√†ng C·ª¶A USER ƒêANG ƒêƒÇNG NH·∫¨P theo tr·∫°ng th√°i
    @GetMapping("/me/trang-thai/{trangThai}")
    public ResponseEntity<List<DonHangResponseDTO>> layDonHangCuaToiTheoTrangThai(
            @RequestHeader("Authorization") String authorizationHeader,
            @PathVariable("trangThai") Integer trangThai) {

        String username = getUsernameFromToken(authorizationHeader);
        List<DonHangResponseDTO> donHangList =
                donHangService.getDonHangCuaUserTheoTrangThai(username, trangThai);

        if (donHangList == null || donHangList.isEmpty()) {
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(donHangList);
    }

    @GetMapping("/me/cho-xac-nhan")
    public ResponseEntity<List<DonHangResponseDTO>> layDonHangChoXacNhanCuaToi(
            @RequestHeader("Authorization") String authorizationHeader) {

        String username = getUsernameFromToken(authorizationHeader);
        List<DonHangResponseDTO> donHangList =
                donHangService.getDonHangCuaUserTheoTrangThai(username, 0);

        if (donHangList == null || donHangList.isEmpty()) {
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(donHangList);
    }

    @PutMapping("/{maDonHang}/xac-nhan")

    public ResponseEntity<String> xacNhanDonHang(
            @PathVariable Integer maDonHang,
            @RequestBody XacNhanDonHangRequestDTO request) {

        donHangService.xacNhanDonHang(maDonHang, request.getItems());

        return ResponseEntity.ok("ƒê∆°n h√†ng #" + maDonHang + " ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† chuy·ªÉn sang tr·∫°ng th√°i ƒêang giao h√†ng.");
    }

    @GetMapping("/imei-lookup")
    public ResponseEntity<List<ImeiResponseDTO>> lookupImeisBySku(@RequestParam("sku") String sku) {
        List<ImeiResponseDTO> imeiList = donHangService.findAvailableImeisBySku(sku);
        if (imeiList == null || imeiList.isEmpty()) {
            return ResponseEntity.noContent().build(); // Tr·∫£ v·ªÅ 204 No Content n·∫øu kh√¥ng t√¨m th·∫•y
        }
        return ResponseEntity.ok(imeiList);
    }



    @GetMapping("/trang-thai/{trangThai}")
    public ResponseEntity<List<DonHangResponseDTO>> layDonHangTheoTrangThai(
            @PathVariable("trangThai") Integer trangThai) {

        List<DonHangResponseDTO> donHangList = donHangService.getDonHangTheoTrangThai(trangThai);

        if (donHangList == null || donHangList.isEmpty()) {
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(donHangList);
    }




















    // ================== C√ÅC API M·ªöI ƒê∆Ø·ª¢C B·ªî SUNG ==================

    /**
     * Endpoint ƒë·ªÉ ƒë√°nh d·∫•u m·ªôt ƒë∆°n h√†ng l√† "Ho√†n th√†nh".
     * Y√™u c·∫ßu ƒë∆°n h√†ng ph·∫£i ƒëang ·ªü tr·∫°ng th√°i "ƒêang giao h√†ng" (1).
     */
    @PutMapping("/{maDonHang}/hoan-thanh")
    public ResponseEntity<String> hoanThanhDonHang(@PathVariable Integer maDonHang) {
        try {
            donHangService.hoanThanhDonHang(maDonHang);
            return ResponseEntity.ok("ƒê∆°n h√†ng #" + maDonHang + " ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng sang tr·∫°ng th√°i 'Ho√†n th√†nh'.");
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        } catch (IllegalStateException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    /**
     * Endpoint ƒë·ªÉ h·ªßy m·ªôt ƒë∆°n h√†ng khi ƒëang giao.
     * Y√™u c·∫ßu ƒë∆°n h√†ng ph·∫£i ƒëang ·ªü tr·∫°ng th√°i "ƒêang giao h√†ng" (1).
     */
    @PutMapping("/{maDonHang}/huy-khi-giao")
    public ResponseEntity<String> huyDonHangKhiDangGiao(@PathVariable Integer maDonHang) {
        try {
            donHangService.huyDonHangKhiDangGiao(maDonHang);
            return ResponseEntity.ok("ƒê∆°n h√†ng #" + maDonHang + " ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.");
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        } catch (IllegalStateException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    /**
     * Endpoint ƒë·ªÉ h·ªßy m·ªôt ƒë∆°n h√†ng ƒëang "Ch·ªù x√°c nh·∫≠n".
     * Y√™u c·∫ßu ƒë∆°n h√†ng ph·∫£i ƒëang ·ªü tr·∫°ng th√°i 0.
     */
    @PutMapping("/{maDonHang}/huy-cho-xac-nhan")
    public ResponseEntity<String> huyDonHangChoXacNhan(@PathVariable Integer maDonHang) {
        try {
            donHangService.huyDonHangChoXacNhan(maDonHang);
            return ResponseEntity.ok("ƒê∆°n h√†ng #" + maDonHang + " ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng khi ƒëang ch·ªù x√°c nh·∫≠n.");
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        } catch (IllegalStateException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }
}

