//package com.example.datn.Controller;
//
//
//
//
//
//
//        import com.example.datn.DTO.CRUDSanPhamAdmin.BienTheDTO;
//        import com.example.datn.DTO.CRUDSanPhamAdmin.SanPhamDTO;
//        import com.example.datn.DTO.CRUDSanPhamAdmin.ThuocTinhDTO;
//        import com.example.datn.Model.BienTheSanPham;
//        import com.example.datn.Model.SanPham;
//        import com.example.datn.Model.ThuocTinh;
//        import com.example.datn.Service.ServiceCRUDSanPham;
//        import lombok.RequiredArgsConstructor;
//        import org.springframework.http.ResponseEntity;
//        import org.springframework.web.bind.annotation.*;
//
//        import java.util.List;
//        import java.util.Optional;
//
//@RestController
//@RequestMapping("/api/admin")
//@RequiredArgsConstructor
//public class ControllerCRUDSanPham {
//
//
//    private final ServiceCRUDSanPham serviceCRUDSanPham;
//
//    // üü¢ L·∫•y to√†n b·ªô s·∫£n ph·∫©m
//    @GetMapping("/dto")
//    public ResponseEntity<List<SanPhamDTO>> getAllSanPhamDTO() {
//        return ResponseEntity.ok(serviceCRUDSanPham.listAllDTO());
//    }
//
//    @GetMapping("/dto/{id}")
//    public ResponseEntity<SanPhamDTO> getSanPhamDTO(@PathVariable Integer id) {
//        Optional<SanPhamDTO> sp = serviceCRUDSanPham.getDTO(id);
//        return sp.map(ResponseEntity::ok)
//                .orElseGet(() -> ResponseEntity.notFound().build());
//    }
//
//    @DeleteMapping("/{id}")
//    public ResponseEntity<Void> deleteSanPham(@PathVariable Integer id) {
//        serviceCRUDSanPham.delete(id);
//        return ResponseEntity.noContent().build();
//    }
//
//
//
//
//    // üü¢ Th√™m s·∫£n ph·∫©m
//    @PostMapping("/sanpham")
//    public ResponseEntity<SanPham> createSanPham(@RequestBody SanPhamDTO dto) {
//        return ResponseEntity.ok(serviceCRUDSanPham.createSanPham(dto));
//    }
//
//    // üü° S·ª≠a s·∫£n ph·∫©m
//    @PutMapping("/sanpham/{id}")
//    public ResponseEntity<SanPham> updateSanPham(@PathVariable Integer id, @RequestBody SanPhamDTO dto) {
//        return ResponseEntity.ok(serviceCRUDSanPham.updateSanPham(id, dto));
//    }
//
//    // üü¢ Th√™m bi·∫øn th·ªÉ cho s·∫£n ph·∫©m
//    @PostMapping("/sanpham/{id}/bienthe")
//    public ResponseEntity<BienTheSanPham> createBienThe(@PathVariable Integer id, @RequestBody BienTheDTO dto) {
//        return ResponseEntity.ok(serviceCRUDSanPham.createBienThe(id, dto));
//    }
//
//    // üü° S·ª≠a bi·∫øn th·ªÉ
//    @PutMapping("/bienthe/{maSKU}")
//    public ResponseEntity<BienTheSanPham> updateBienThe(@PathVariable String maSKU, @RequestBody BienTheDTO dto) {
//        return ResponseEntity.ok(serviceCRUDSanPham.updateBienThe(maSKU, dto));
//    }
//
//    // üü¢ Th√™m thu·ªôc t√≠nh cho bi·∫øn th·ªÉ
//    @PostMapping("/bienthe/{maSKU}/thuoctinh")
//    public ResponseEntity<ThuocTinh> createThuocTinh(@PathVariable String maSKU, @RequestBody ThuocTinhDTO dto) {
//        return ResponseEntity.ok(serviceCRUDSanPham.createThuocTinh(maSKU, dto));
//    }
//
//    // üü° S·ª≠a thu·ªôc t√≠nh
//    @PutMapping("/thuoctinh/{id}")
//    public ResponseEntity<ThuocTinh> updateThuocTinh(@PathVariable Integer id, @RequestBody ThuocTinhDTO dto) {
//        return ResponseEntity.ok(serviceCRUDSanPham.updateThuocTinh(id, dto));
//    }
//
//
//}


package com.example.datn.Controller;

import com.example.datn.DTO.CRUDSanPhamAdmin.SanPhamDTO;
import com.example.datn.DTO.AdminKhuyenMai.VariantSummaryDTO;
import com.example.datn.Model.SanPham;
import com.example.datn.Service.ServiceCRUDSanPham;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/admin/products") // S·ª≠ d·ª•ng t√™n resource s·ªë nhi·ªÅu: 'products'
@RequiredArgsConstructor
public class ControllerCRUDSanPham {

    private final ServiceCRUDSanPham serviceCRUDSanPham;

    // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m (bao g·ªìm bi·∫øn th·ªÉ v√† thu·ªôc t√≠nh)
    @GetMapping
    public ResponseEntity<List<SanPhamDTO>> getAllProducts() {
        return ResponseEntity.ok(serviceCRUDSanPham.getAllSanPhamDTOs());
    }

    // L·∫•y m·ªôt s·∫£n ph·∫©m theo ID
    @GetMapping("/{id}")
    public ResponseEntity<SanPhamDTO> getProductById(@PathVariable Integer id) {
        return ResponseEntity.ok(serviceCRUDSanPham.getSanPhamDTOById(id));
    }

    // T·∫°o s·∫£n ph·∫©m m·ªõi (bao g·ªìm bi·∫øn th·ªÉ v√† thu·ªôc t√≠nh)
    @PostMapping
    public ResponseEntity<SanPhamDTO> createProduct(@RequestBody SanPhamDTO dto) {
        SanPham createdSanPham = serviceCRUDSanPham.createSanPham(dto);
        // Tr·∫£ v·ªÅ DTO c·ªßa s·∫£n ph·∫©m v·ª´a t·∫°o
        SanPhamDTO createdSanPhamDto = serviceCRUDSanPham.getSanPhamDTOById(createdSanPham.getMaSanPham());

        // Tr·∫£ v·ªÅ status 201 Created v√† location c·ªßa resource m·ªõi
        URI location = ServletUriComponentsBuilder.fromCurrentRequest()
                .path("/{id}")
                .buildAndExpand(createdSanPham.getMaSanPham())
                .toUri();

        return ResponseEntity.created(location).body(createdSanPhamDto);
    }

    // C·∫≠p nh·∫≠t m·ªôt s·∫£n ph·∫©m (bao g·ªìm th√™m/s·ª≠a/x√≥a bi·∫øn th·ªÉ v√† thu·ªôc t√≠nh)
    @PutMapping("/{id}")
    public ResponseEntity<SanPhamDTO> updateProduct(@PathVariable Integer id, @RequestBody SanPhamDTO dto) {
        SanPham updatedSanPham = serviceCRUDSanPham.updateSanPham(id, dto);
        SanPhamDTO updatedDto = serviceCRUDSanPham.getSanPhamDTOById(updatedSanPham.getMaSanPham());
        return ResponseEntity.ok(updatedDto);
    }

    // X√≥a m·ªôt s·∫£n ph·∫©m (s·∫Ω x√≥a c·∫£ bi·∫øn th·ªÉ v√† thu·ªôc t√≠nh li√™n quan)
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProduct(@PathVariable Integer id) {
        serviceCRUDSanPham.deleteSanPham(id);
        return ResponseEntity.noContent().build(); // Tr·∫£ v·ªÅ 204 No Content
    }

    // X√≥a m·ªôt bi·∫øn th·ªÉ c·ª• th·ªÉ
    @DeleteMapping("/variants/{maSKU}")
    public ResponseEntity<Void> deleteVariant(@PathVariable String maSKU) {
        serviceCRUDSanPham.deleteBienThe(maSKU);
        return ResponseEntity.noContent().build();
    }

    // X√≥a m·ªôt thu·ªôc t√≠nh c·ª• th·ªÉ
    @DeleteMapping("/attributes/{id}")
    public ResponseEntity<Void> deleteAttribute(@PathVariable Integer id) {
        serviceCRUDSanPham.deleteThuocTinh(id);
        return ResponseEntity.noContent().build();
    }



//    @GetMapping("/variants-summary")
//    public ResponseEntity<List<Map<String, String>>> getVariantsSummary() {
//        List<Map<String, String>> summary = serviceCRUDSanPham.getAllSanPhamDTOs().stream()
//                .flatMap(sp -> sp.getBienTheList().stream()
//                        // Th√™m ƒëi·ªÅu ki·ªán l·ªçc ·ªü ƒë√¢y
//                        .filter(bt -> bt.getTrangThai() == 1)
//                        .map(bt -> Map.of(
//                                "maSKU", bt.getMaSKU(),
//                                "tenHienThi", sp.getTenSanPham() + " - SKU: " + bt.getMaSKU()
//                        ))
//                )
//                .collect(Collectors.toList());
//        return ResponseEntity.ok(summary);
//    }



    @GetMapping("/variants-summary")
    public ResponseEntity<List<VariantSummaryDTO>> getVariantsSummary() {
        List<VariantSummaryDTO> summary = serviceCRUDSanPham.getAllSanPhamDTOs().stream()
                .flatMap(sp -> {
                    String tenDanhMuc = (sp.getTenDanhMuc() != null) ? sp.getTenDanhMuc() : "Kh√¥ng c√≥ danh m·ª•c";

                    return sp.getBienTheList().stream()
                            .filter(bt -> bt.getTrangThai() == 1) // L·ªçc c√°c bi·∫øn th·ªÉ ƒëang ho·∫°t ƒë·ªông
                            .map(bt -> {
                                String tenHienThi = String.format("%s - %s - SKU: %s",
                                        tenDanhMuc,
                                        sp.getTenSanPham(),
                                        bt.getMaSKU());

                                return VariantSummaryDTO.builder()
                                        .maSKU(bt.getMaSKU())
                                        .tenHienThi(tenHienThi)
                                        .gia(bt.getGia())
                                        .giaKhongKhuyenMai(bt.getGiaKhongKhuyenMai())
                                        .build();
                            });
                })
                .collect(Collectors.toList());

        return ResponseEntity.ok(summary);
    }
    @GetMapping("/accessories/variants-summary")
    public ResponseEntity<List<Map<String, String>>> getAccessoryVariantsSummary() {
        return ResponseEntity.ok(serviceCRUDSanPham.getAccessoryVariantsSummary());
    }



}