package com.example.datn.BanHangTaiQuay.Service;

import com.example.datn.BanHangTaiQuay.DTO.ChiTietDonHangBanHangTaiQuayDTO;
import com.example.datn.BanHangTaiQuay.DTO.ChotDonRequest;
import com.example.datn.BanHangTaiQuay.DTO.DonHangBanHangTaiQuayDTO;
import com.example.datn.BanHangTaiQuay.DTO.LuuDonRequest;
import com.example.datn.BanHangTaiQuay.Repo.*;

import com.example.datn.Model.*;
import com.example.datn.Repository.UserVoucherRepository;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ThanhToanBanHangTaiQuayService {

    private final DonHangBanHangTaiQuayRepository donHangRepository;
    private final DonHangChiTietBanHangTaiQuayRepository chiTietDonHangRepository;
    private final IMEIBanHangTaiQuayRepository imeiRepository;
    private final UsersBanHangTaiQuayRepository usersRepository;
    private final BienTheSanPhamBanHangTaiQuayRepository bienTheSanPhamRepository;
    private final BienThePhuKienBanHangTaiQuayRepository bienThePhuKienRepository;
    private final VoucherBanHangTaiQuayRepository voucherRepository;
    private final UserVoucherRepository userVoucherRepository;

    /**
     * L∆∞u ƒë∆°n h√†ng - KH√îNG tr·ª´ kho, KH√îNG gi·∫£m voucher
     * Tr·∫°ng th√°i: Ch·ªù thanh to√°n
     * Logic: KI·ªÇM TRA maDonHang - T·∫†O M·ªöI ho·∫∑c C·∫¨P NH·∫¨T
     */
    @Transactional
    public DonHangBanHangTaiQuayDTO luuDon(LuuDonRequest request) {
        try {
            System.out.println("üîç DEBUG: LuuDonRequest = " + request);
            System.out.println("üîç DEBUG: UserId = " + request.getUserId());
            System.out.println("üîç DEBUG: MaDonHang = " + request.getMaDonHang());
            System.out.println("üîç DEBUG: ChiTietDonHangs = " + request.getChiTietDonHangs());

            Users user = usersRepository.findById(request.getUserId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user v·ªõi ID: " + request.getUserId()));

            UserVoucher userVoucher = null;
            if (request.getUserVoucherId() != null) {
                userVoucher = new UserVoucher();
                userVoucher.setId(request.getUserVoucherId());
            }

            DonHang donHang;

            // ‚úÖ KI·ªÇM TRA maDonHang - T·∫†O M·ªöI ho·∫∑c C·∫¨P NH·∫¨T
            if (request.getMaDonHang() != null) {
                // ‚úÖ C·∫¨P NH·∫¨T ƒê∆†N H√ÄNG C≈®
                System.out.println("üîÑ C·∫≠p nh·∫≠t ƒë∆°n h√†ng c≈©: " + request.getMaDonHang());
                donHang = donHangRepository.findByMaDonHang(request.getMaDonHang());
                if (donHang == null) {
                    throw new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£: " + request.getMaDonHang());
                }

                // X√≥a to√†n b·ªô chi ti·∫øt ƒë∆°n h√†ng c≈©
                chiTietDonHangRepository.deleteByDonHangId(request.getMaDonHang());
                System.out.println("üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô chi ti·∫øt ƒë∆°n h√†ng c≈©");

            } else {
                // ‚úÖ T·∫†O ƒê∆†N H√ÄNG M·ªöI
                System.out.println("üÜï T·∫°o ƒë∆°n h√†ng m·ªõi");
                donHang = new DonHang();
                donHang.setUser(user);
                donHang.setNgayDat(LocalDateTime.now());
                donHang.setUserVoucher(userVoucher);
            }

            // C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
            donHang.setTrangThai(5); // Tr·∫°ng th√°i: 5 = Ch·ªù thanh to√°n
            donHang.setTongTien(request.getTongTien());
            donHang.setDiaChiGiaoHang(request.getDiaChiGiaoHang());
            donHang.setSoDienThoai(request.getSoDienThoai());
            donHang.setPhuongThucThanhToan(request.getPhuongThucThanhToan());
            donHang.setGhiChu(request.getGhiChu());

            // C·∫≠p nh·∫≠t UserVoucher n·∫øu c√≥
            if (request.getUserVoucherId() != null) {
                UserVoucher userVoucherObj = new UserVoucher();
                userVoucherObj.setId(request.getUserVoucherId());
                donHang.setUserVoucher(userVoucherObj);
            }

            DonHang savedDonHang = donHangRepository.save(donHang);

            // T·∫°o chi ti·∫øt ƒë∆°n h√†ng (KH√îNG tr·ª´ kho)
            for (ChiTietDonHangBanHangTaiQuayDTO chiTietDTO : request.getChiTietDonHangs()) {
                ChiTietDonHang chiTiet = new ChiTietDonHang();
                chiTiet.setDonHang(savedDonHang);
                chiTiet.setSoLuong(chiTietDTO.getSoLuong());
                chiTiet.setGia(chiTietDTO.getGia());

                // X·ª≠ l√Ω s·∫£n ph·∫©m ch√≠nh ho·∫∑c ph·ª• ki·ªán
                if ("sanpham".equals(chiTietDTO.getLoaiSanPham())) {
                    // S·∫£n ph·∫©m ch√≠nh - t√¨m t·ª´ database
                    System.out.println("üîç DEBUG: X·ª≠ l√Ω s·∫£n ph·∫©m ch√≠nh v·ªõi SKU: " + chiTietDTO.getMaSKU());
                    BienTheSanPham bienTheSanPham = bienTheSanPhamRepository.findByMaSKU(chiTietDTO.getMaSKU())
                            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m v·ªõi SKU: " + chiTietDTO.getMaSKU()));
                    chiTiet.setBienTheSanPham(bienTheSanPham);
                    System.out.println("‚úÖ DEBUG: ƒê√£ t√¨m th·∫•y s·∫£n ph·∫©m ch√≠nh: " + bienTheSanPham.getMaSKU());
                } else if ("phukien".equals(chiTietDTO.getLoaiSanPham())) {
                    // Ph·ª• ki·ªán - t√¨m t·ª´ database
                    System.out.println("üîç DEBUG: X·ª≠ l√Ω ph·ª• ki·ªán v·ªõi SKU: " + chiTietDTO.getMaSKUPhuKien());
                    BienThePhuKien bienThePhuKien = bienThePhuKienRepository.findByMaSKUPhuKien(chiTietDTO.getMaSKUPhuKien())
                            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ph·ª• ki·ªán v·ªõi SKU: " + chiTietDTO.getMaSKUPhuKien()));
                    chiTiet.setBienThePhuKien(bienThePhuKien);
                    System.out.println("‚úÖ DEBUG: ƒê√£ t√¨m th·∫•y ph·ª• ki·ªán: " + bienThePhuKien.getMaSKUPhuKien());
                } else {
                    System.out.println("‚ö†Ô∏è DEBUG: Lo·∫°i s·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh: " + chiTietDTO.getLoaiSanPham());
                }

                // X·ª≠ l√Ω IMEI n·∫øu c√≥ - GI·ªÆ NGUY√äN TR·∫†NG TH√ÅI IMEI
                if (chiTietDTO.getImeiId() != null) {
                    System.out.println("üîç DEBUG: X·ª≠ l√Ω IMEI v·ªõi ID: " + chiTietDTO.getImeiId());

                    // ‚úÖ KI·ªÇM TRA: N·∫øu ID l√† string temp (t·ª´ ƒë∆°n h√†ng l∆∞u)
                    if (chiTietDTO.getImeiId().toString().startsWith("temp_")) {
                        System.out.println("‚ÑπÔ∏è DEBUG: IMEI ID l√† temp string, t√¨m IMEI theo s·ªë IMEI");
                        // ‚úÖ T√åM IMEI THEO S·ªê IMEI thay v√¨ b·ªè qua
                        if (chiTietDTO.getImei() != null && !chiTietDTO.getImei().trim().isEmpty()) {
                            IMEI imei = imeiRepository.findByImei(chiTietDTO.getImei()).orElse(null);
                            if (imei != null) {
                                chiTiet.setImei(imei);
                                // ‚úÖ L∆ØU ƒê∆†N: GI·ªÆ NGUY√äN tr·∫°ng th√°i IMEI (kh√¥ng thay ƒë·ªïi)
                                System.out.println("‚úÖ DEBUG: Gi·ªØ nguy√™n tr·∫°ng th√°i IMEI: " + imei.getTrangThai());
                            } else {
                                System.out.println("‚ö†Ô∏è DEBUG: Kh√¥ng t√¨m th·∫•y IMEI v·ªõi s·ªë: " + chiTietDTO.getImei());
                            }
                        } else {
                            System.out.println("‚ö†Ô∏è DEBUG: Kh√¥ng c√≥ s·ªë IMEI ƒë·ªÉ t√¨m");
                        }
                    } else {
                        // X·ª≠ l√Ω IMEI v·ªõi ID th·ª±c t·∫ø
                        try {
                            Integer imeiId = Integer.parseInt(chiTietDTO.getImeiId().toString());
                            IMEI imei = imeiRepository.findById(imeiId).orElse(null);
                            if (imei != null) {
                                chiTiet.setImei(imei);
                                // ‚úÖ L∆ØU ƒê∆†N: GI·ªÆ NGUY√äN tr·∫°ng th√°i IMEI (kh√¥ng thay ƒë·ªïi)
                                System.out.println("‚úÖ DEBUG: Gi·ªØ nguy√™n tr·∫°ng th√°i IMEI: " + imei.getTrangThai());
                            } else {
                                System.out.println("‚ö†Ô∏è DEBUG: Kh√¥ng t√¨m th·∫•y IMEI v·ªõi ID: " + imeiId);
                            }
                        } catch (NumberFormatException e) {
                            System.out.println("‚ö†Ô∏è DEBUG: IMEI ID kh√¥ng ph·∫£i s·ªë nguy√™n: " + chiTietDTO.getImeiId());
                        }
                    }
                } else {
                    System.out.println("‚ÑπÔ∏è DEBUG: Kh√¥ng c√≥ IMEI cho s·∫£n ph·∫©m n√†y");
                }

                chiTietDonHangRepository.save(chiTiet);
            }

            // ‚úÖ L∆ØU ƒê∆†N: Kh√¥ng x·ª≠ l√Ω tr·ª´ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m/ph·ª• ki·ªán v√† voucher
            System.out.println("‚ÑπÔ∏è DEBUG: L∆∞u ƒë∆°n - Kh√¥ng tr·ª´ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m/ph·ª• ki·ªán v√† voucher");

            return convertToDTO(savedDonHang);

        } catch (Exception e) {
            throw new RuntimeException("L·ªói khi l∆∞u ƒë∆°n h√†ng: " + e.getMessage(), e);
        }
    }

    /**
     * Thanh to√°n ƒë∆°n h√†ng - C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ "Ch·ªù thanh to√°n" sang "ƒê√£ thanh to√°n"
     * IMEI status = 0 (ƒë√£ b√°n)
     * Logic: KI·ªÇM TRA maDonHang - T·∫†O M·ªöI ho·∫∑c C·∫¨P NH·∫¨T
     */
    @Transactional
    public DonHangBanHangTaiQuayDTO thanhToan(ChotDonRequest request) {
        try {
            System.out.println("üîç DEBUG: ChotDonRequest = " + request);
            System.out.println("üîç DEBUG: UserId = " + request.getUserId());
            System.out.println("üîç DEBUG: MaDonHang = " + request.getMaDonHang());
            System.out.println("üîç DEBUG: ChiTietDonHangs = " + request.getChiTietDonHangs());

            Users user = usersRepository.findById(request.getUserId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user v·ªõi ID: " + request.getUserId()));

            UserVoucher userVoucher = null;
            if (request.getUserVoucherId() != null) {
                userVoucher = new UserVoucher();
                userVoucher.setId(request.getUserVoucherId());
            }

            DonHang donHang;

            // ‚úÖ KI·ªÇM TRA maDonHang - T·∫†O M·ªöI ho·∫∑c C·∫¨P NH·∫¨T
            if (request.getMaDonHang() != null) {
                // ‚úÖ C·∫¨P NH·∫¨T ƒê∆†N H√ÄNG C≈® (ƒê√É L∆ØU)
                System.out.println("üîÑ Thanh to√°n ƒë∆°n h√†ng ƒë√£ l∆∞u: " + request.getMaDonHang());
                donHang = donHangRepository.findByMaDonHang(request.getMaDonHang());
                if (donHang == null) {
                    throw new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£: " + request.getMaDonHang());
                }

                // ‚úÖ QUAN TR·ªåNG: Gi·∫£i ph√≥ng IMEI c≈© v·ªÅ tr·∫°ng th√°i 1 (available)
                // V√¨ s·∫£n ph·∫©m c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi, c·∫ßn gi·∫£i ph√≥ng IMEI c≈© tr∆∞·ªõc khi x√≥a chi ti·∫øt
                System.out.println("üîÑ Gi·∫£i ph√≥ng IMEI c≈© v·ªÅ tr·∫°ng th√°i 1 (available)");
                for (ChiTietDonHang chiTietCu : donHang.getChiTietDonHangs()) {
                    if (chiTietCu.getImei() != null) {
                        chiTietCu.getImei().setTrangThai(1); // Available
                        imeiRepository.save(chiTietCu.getImei());
                        System.out.println("‚úÖ ƒê√£ gi·∫£i ph√≥ng IMEI: " + chiTietCu.getImei().getImei());
                    }
                }

                // ‚úÖ QUAN TR·ªåNG: X√≥a to√†n b·ªô chi ti·∫øt ƒë∆°n h√†ng c≈©
                // V√¨ s·∫£n ph·∫©m c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi (th√™m/b·ªõt s·∫£n ph·∫©m)
                System.out.println("üóëÔ∏è X√≥a to√†n b·ªô chi ti·∫øt ƒë∆°n h√†ng c≈©");
                chiTietDonHangRepository.deleteByDonHangId(request.getMaDonHang());
                System.out.println("‚úÖ ƒê√£ x√≥a chi ti·∫øt ƒë∆°n h√†ng c≈©");

            } else {
                // ‚úÖ T·∫†O ƒê∆†N H√ÄNG M·ªöI
                System.out.println("üÜï T·∫°o ƒë∆°n h√†ng m·ªõi");
                donHang = new DonHang();
                donHang.setUser(user);
                donHang.setNgayDat(LocalDateTime.now());
                donHang.setUserVoucher(userVoucher);
            }

            // C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
            donHang.setTrangThai(2); // Tr·∫°ng th√°i: 2 = ƒê√£ thanh to√°n
            donHang.setTongTien(request.getTongTien());
            donHang.setDiaChiGiaoHang(request.getDiaChiGiaoHang());
            donHang.setSoDienThoai(request.getSoDienThoai());
            donHang.setPhuongThucThanhToan(request.getPhuongThucThanhToan());
            donHang.setGhiChu(request.getGhiChu());

            // C·∫≠p nh·∫≠t UserVoucher n·∫øu c√≥
            if (request.getUserVoucherId() != null) {
                UserVoucher userVoucherObj = new UserVoucher();
                userVoucherObj.setId(request.getUserVoucherId());
                donHang.setUserVoucher(userVoucherObj);
            }

            DonHang savedDonHang = donHangRepository.save(donHang);

            // ‚úÖ T·∫†O CHI TI·∫æT ƒê∆†N H√ÄNG M·ªöI (cho c·∫£ ƒë∆°n m·ªõi v√† ƒë∆°n ƒë√£ l∆∞u)
            // V·ªõi ƒë∆°n ƒë√£ l∆∞u, chi ti·∫øt c≈© ƒë√£ ƒë∆∞·ª£c x√≥a ·ªü tr√™n, gi·ªù t·∫°o chi ti·∫øt m·ªõi
            System.out.println("üìù T·∫°o chi ti·∫øt ƒë∆°n h√†ng m·ªõi");
            System.out.println("üîç DEBUG: S·ªë l∆∞·ª£ng chi ti·∫øt t·ª´ frontend: " + request.getChiTietDonHangs().size());
            
            int chiTietIndex = 0;
            for (ChiTietDonHangBanHangTaiQuayDTO chiTietDTO : request.getChiTietDonHangs()) {
                chiTietIndex++;
                System.out.println("\nüì¶ X·ª≠ l√Ω chi ti·∫øt #" + chiTietIndex + ":");
                System.out.println("  - maSKU: " + chiTietDTO.getMaSKU());
                System.out.println("  - maSKUPhuKien: " + chiTietDTO.getMaSKUPhuKien());
                System.out.println("  - loaiSanPham: " + chiTietDTO.getLoaiSanPham());
                System.out.println("  - soLuong: " + chiTietDTO.getSoLuong());
                ChiTietDonHang chiTiet = new ChiTietDonHang();
                chiTiet.setDonHang(savedDonHang);
                chiTiet.setSoLuong(chiTietDTO.getSoLuong());
                chiTiet.setGia(chiTietDTO.getGia());

                // X·ª≠ l√Ω s·∫£n ph·∫©m ch√≠nh ho·∫∑c ph·ª• ki·ªán
                if ("sanpham".equals(chiTietDTO.getLoaiSanPham())) {
                    // S·∫£n ph·∫©m ch√≠nh - t√¨m t·ª´ database
                    System.out.println("üîç DEBUG: X·ª≠ l√Ω s·∫£n ph·∫©m ch√≠nh v·ªõi SKU: " + chiTietDTO.getMaSKU());
                    BienTheSanPham bienTheSanPham = bienTheSanPhamRepository.findByMaSKU(chiTietDTO.getMaSKU())
                            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m v·ªõi SKU: " + chiTietDTO.getMaSKU()));
                    chiTiet.setBienTheSanPham(bienTheSanPham);
                    System.out.println("‚úÖ DEBUG: ƒê√£ t√¨m th·∫•y s·∫£n ph·∫©m ch√≠nh: " + bienTheSanPham.getMaSKU());
                } else if ("phukien".equals(chiTietDTO.getLoaiSanPham())) {
                    // Ph·ª• ki·ªán - t√¨m t·ª´ database
                    System.out.println("üîç DEBUG: X·ª≠ l√Ω ph·ª• ki·ªán v·ªõi SKU: " + chiTietDTO.getMaSKUPhuKien());
                    BienThePhuKien bienThePhuKien = bienThePhuKienRepository.findByMaSKUPhuKien(chiTietDTO.getMaSKUPhuKien())
                            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ph·ª• ki·ªán v·ªõi SKU: " + chiTietDTO.getMaSKUPhuKien()));
                    chiTiet.setBienThePhuKien(bienThePhuKien);
                    System.out.println("‚úÖ DEBUG: ƒê√£ t√¨m th·∫•y ph·ª• ki·ªán: " + bienThePhuKien.getMaSKUPhuKien());
                } else {
                    System.out.println("‚ö†Ô∏è DEBUG: Lo·∫°i s·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh: " + chiTietDTO.getLoaiSanPham());
                }

                // X·ª≠ l√Ω IMEI n·∫øu c√≥ - C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI ƒê√É B√ÅN
                if (chiTietDTO.getImeiId() != null) {
                    System.out.println("üîç DEBUG: X·ª≠ l√Ω IMEI v·ªõi ID: " + chiTietDTO.getImeiId());

                    // ‚úÖ KI·ªÇM TRA: N·∫øu ID l√† string temp (t·ª´ ƒë∆°n h√†ng l∆∞u)
                    if (chiTietDTO.getImeiId().toString().startsWith("temp_")) {
                        System.out.println("‚ÑπÔ∏è DEBUG: IMEI ID l√† temp string, t√¨m IMEI theo s·ªë IMEI");
                        // ‚úÖ T√åM IMEI THEO S·ªê IMEI thay v√¨ b·ªè qua
                        if (chiTietDTO.getImei() != null && !chiTietDTO.getImei().trim().isEmpty()) {
                            IMEI imei = imeiRepository.findByImei(chiTietDTO.getImei()).orElse(null);
                            if (imei != null) {
                                chiTiet.setImei(imei);
                                // ‚úÖ THANH TO√ÅN: Chuy·ªÉn IMEI v·ªÅ tr·∫°ng th√°i 0 (ƒë√£ b√°n)
                                imei.setTrangThai(0);
                                imeiRepository.save(imei);
                                System.out.println("‚úÖ DEBUG: ƒê√£ t√¨m th·∫•y v√† c·∫≠p nh·∫≠t IMEI theo s·ªë: " + chiTietDTO.getImei());
                            } else {
                                System.out.println("‚ö†Ô∏è DEBUG: Kh√¥ng t√¨m th·∫•y IMEI v·ªõi s·ªë: " + chiTietDTO.getImei());
                            }
                        } else {
                            System.out.println("‚ö†Ô∏è DEBUG: Kh√¥ng c√≥ s·ªë IMEI ƒë·ªÉ t√¨m");
                        }
                    } else {
                        // X·ª≠ l√Ω IMEI v·ªõi ID th·ª±c t·∫ø
                        try {
                            Integer imeiId = Integer.parseInt(chiTietDTO.getImeiId().toString());
                            IMEI imei = imeiRepository.findById(imeiId).orElse(null);
                            if (imei != null) {
                                chiTiet.setImei(imei);
                                // ‚úÖ THANH TO√ÅN: Chuy·ªÉn IMEI v·ªÅ tr·∫°ng th√°i 0 (ƒë√£ b√°n)
                                imei.setTrangThai(0);
                                imeiRepository.save(imei);
                                System.out.println("‚úÖ DEBUG: ƒê√£ c·∫≠p nh·∫≠t IMEI sang tr·∫°ng th√°i ƒë√£ b√°n (0)");
                            } else {
                                System.out.println("‚ö†Ô∏è DEBUG: Kh√¥ng t√¨m th·∫•y IMEI v·ªõi ID: " + imeiId);
                            }
                        } catch (NumberFormatException e) {
                            System.out.println("‚ö†Ô∏è DEBUG: IMEI ID kh√¥ng ph·∫£i s·ªë nguy√™n: " + chiTietDTO.getImeiId());
                        }
                    }
                } else {
                    System.out.println("‚ÑπÔ∏è DEBUG: Kh√¥ng c√≥ IMEI cho s·∫£n ph·∫©m n√†y");
                }

                ChiTietDonHang savedChiTiet = chiTietDonHangRepository.save(chiTiet);
                System.out.println("‚úÖ ƒê√£ l∆∞u chi ti·∫øt #" + chiTietIndex + " v·ªõi ID: " + savedChiTiet.getId());

                // ‚úÖ TH√äM LOGIC M·ªöI: Tr·ª´ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m/ph·ª• ki·ªán n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
                if (Boolean.TRUE.equals(request.getUpdateProductQuantities())) {
                    System.out.println("üîç DEBUG: Tr·ª´ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m/ph·ª• ki·ªán");

                    if ("sanpham".equals(chiTietDTO.getLoaiSanPham())) {
                        // Tr·ª´ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ch√≠nh
                        System.out.println("üîç DEBUG: T√¨m s·∫£n ph·∫©m v·ªõi SKU: " + chiTietDTO.getMaSKU());
                        BienTheSanPham bienTheSanPham = bienTheSanPhamRepository.findByMaSKU(chiTietDTO.getMaSKU())
                                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m v·ªõi SKU: " + chiTietDTO.getMaSKU()));

                        System.out.println("üîç DEBUG: S·∫£n ph·∫©m t√¨m th·∫•y: " + bienTheSanPham.getSanPham().getTenSanPham() + 
                                          ", S·ªë l∆∞·ª£ng hi·ªán t·∫°i: " + bienTheSanPham.getSoLuong() + 
                                          ", C·∫ßn tr·ª´: " + chiTietDTO.getSoLuong());

                        if (bienTheSanPham.getSoLuong() < chiTietDTO.getSoLuong()) {
                            throw new RuntimeException("S·∫£n ph·∫©m " + bienTheSanPham.getSanPham().getTenSanPham() + " kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn.");
                        }

                        bienTheSanPham.setSoLuong(bienTheSanPham.getSoLuong() - chiTietDTO.getSoLuong());
                        bienTheSanPhamRepository.save(bienTheSanPham);
                        System.out.println("‚úÖ DEBUG: ƒê√£ tr·ª´ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m: " + chiTietDTO.getSoLuong());

                    } else if ("phukien".equals(chiTietDTO.getLoaiSanPham())) {
                        // Tr·ª´ s·ªë l∆∞·ª£ng ph·ª• ki·ªán
                        BienThePhuKien bienThePhuKien = bienThePhuKienRepository.findByMaSKUPhuKien(chiTietDTO.getMaSKUPhuKien())
                                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ph·ª• ki·ªán v·ªõi SKU: " + chiTietDTO.getMaSKUPhuKien()));

                        if (bienThePhuKien.getSoLuong() < chiTietDTO.getSoLuong()) {
                            throw new RuntimeException("Ph·ª• ki·ªán " + bienThePhuKien.getPhuKien().getTenPhuKien() + " kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn.");
                        }

                        bienThePhuKien.setSoLuong(bienThePhuKien.getSoLuong() - chiTietDTO.getSoLuong());
                        bienThePhuKienRepository.save(bienThePhuKien);
                        System.out.println("‚úÖ DEBUG: ƒê√£ tr·ª´ s·ªë l∆∞·ª£ng ph·ª• ki·ªán: " + chiTietDTO.getSoLuong());
                    }
                } else {
                    System.out.println("‚ÑπÔ∏è DEBUG: Kh√¥ng tr·ª´ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m/ph·ª• ki·ªán");
                }
            }
            
            System.out.println("‚úÖ ƒê√£ t·∫°o xong t·∫•t c·∫£ " + chiTietIndex + " chi ti·∫øt ƒë∆°n h√†ng");

            // ‚úÖ TH√äM LOGIC M·ªöI: Tr·ª´ s·ªë l∆∞·ª£ng voucher n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            if (Boolean.TRUE.equals(request.getUpdateVoucherQuantities()) && request.getUserVoucherId() != null) {
                try {
                    System.out.println("üîç DEBUG: Tr·ª´ s·ªë l∆∞·ª£ng voucher");

                    Voucher voucher = voucherRepository.findById(request.getUserVoucherId())
                            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y voucher v·ªõi ID: " + request.getUserVoucherId()));

                    if (voucher.getSoLanSuDung() <= 0) {
                        throw new RuntimeException("Voucher ƒë√£ h·∫øt s·ªë l·∫ßn s·ª≠ d·ª•ng");
                    }

                    voucher.setSoLanSuDung(voucher.getSoLanSuDung() - 1);
                    voucherRepository.save(voucher);
                    System.out.println("‚úÖ DEBUG: ƒê√£ tr·ª´ s·ªë l∆∞·ª£ng voucher: " + voucher.getSoLanSuDung());

                    // ‚úÖ TH√äM LOGIC M·ªöI: C·ªông s·ªë l·∫ßn s·ª≠ d·ª•ng trong UserVoucher
                    System.out.println("üîç DEBUG: C·ªông s·ªë l·∫ßn s·ª≠ d·ª•ng UserVoucher");
                    System.out.println("üîç DEBUG: request.getUserId() = " + request.getUserId());
                    System.out.println("üîç DEBUG: request.getUserVoucherId() = " + request.getUserVoucherId());

                    // T√¨m UserVoucher theo userId v√† voucherId
                    List<UserVoucher> userVoucherList = userVoucherRepository.findByUserIdAndVoucherId(request.getUserId(), request.getUserVoucherId());
                    System.out.println("üîç DEBUG: userVoucherList t√¨m ƒë∆∞·ª£c: " + userVoucherList.size() + " b·∫£n ghi");

                    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p c√≥ nhi·ªÅu b·∫£n ghi (duplicate data)
                    if (userVoucherList.size() > 1) {
                        System.out.println("‚ö†Ô∏è WARNING: T√¨m th·∫•y " + userVoucherList.size() + " b·∫£n ghi UserVoucher duplicate!");
                        System.out.println("üîç DEBUG: S·∫Ω s·ª≠ d·ª•ng b·∫£n ghi ƒë·∫ßu ti√™n v√† x√≥a c√°c b·∫£n ghi duplicate");

                        // S·ª≠ d·ª•ng b·∫£n ghi ƒë·∫ßu ti√™n
                        UserVoucher userVoucherToUpdate = userVoucherList.get(0);
                        userVoucherToUpdate.setSoLanSuDung(userVoucherToUpdate.getSoLanSuDung() + 1);
                        userVoucherRepository.save(userVoucherToUpdate);
                        System.out.println("‚úÖ DEBUG: ƒê√£ c·∫≠p nh·∫≠t UserVoucher ƒë·∫ßu ti√™n: " + userVoucherToUpdate.getSoLanSuDung());

                        // X√≥a c√°c b·∫£n ghi duplicate (t·ª´ index 1 tr·ªü ƒëi)
                        for (int i = 1; i < userVoucherList.size(); i++) {
                            userVoucherRepository.delete(userVoucherList.get(i));
                            System.out.println("üóëÔ∏è DEBUG: ƒê√£ x√≥a UserVoucher duplicate: " + userVoucherList.get(i).getId());
                        }

                    } else if (userVoucherList.size() == 1) {
                        // Tr∆∞·ªùng h·ª£p b√¨nh th∆∞·ªùng: c√≥ ƒë√∫ng 1 b·∫£n ghi
                        UserVoucher userVoucherToUpdate = userVoucherList.get(0);
                        userVoucherToUpdate.setSoLanSuDung(userVoucherToUpdate.getSoLanSuDung() + 1);
                        userVoucherRepository.save(userVoucherToUpdate);
                        System.out.println("‚úÖ DEBUG: ƒê√£ c·∫≠p nh·∫≠t UserVoucher: " + userVoucherToUpdate.getSoLanSuDung());

                    } else {
                        // Tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y UserVoucher
                        System.out.println("‚ö†Ô∏è WARNING: Kh√¥ng t√¨m th·∫•y UserVoucher v·ªõi userId=" + request.getUserId() + " v√† voucherId=" + request.getUserVoucherId());
                        System.out.println("üîç DEBUG: T·∫°o UserVoucher m·ªõi");

                        // T·∫°o UserVoucher m·ªõi
                        UserVoucher newUserVoucher = new UserVoucher();
                        newUserVoucher.setUser(user);
                        newUserVoucher.setVoucher(voucher);
                        newUserVoucher.setSoLanSuDung(1);
                        newUserVoucher.setTrangThai(1); // ƒê√£ s·ª≠ d·ª•ng
                        userVoucherRepository.save(newUserVoucher);
                        System.out.println("‚úÖ DEBUG: ƒê√£ t·∫°o UserVoucher m·ªõi v·ªõi soLanSuDung=1");
                    }

                } catch (Exception e) {
                    System.out.println("‚ùå ERROR: L·ªói khi x·ª≠ l√Ω voucher: " + e.getMessage());
                    e.printStackTrace();
                    throw new RuntimeException("L·ªói khi x·ª≠ l√Ω voucher: " + e.getMessage(), e);
                }
            } else {
                System.out.println("‚ÑπÔ∏è DEBUG: Kh√¥ng tr·ª´ s·ªë l∆∞·ª£ng voucher");
            }

            return convertToDTO(savedDonHang);

        } catch (Exception e) {
            System.out.println("‚ùå ERROR: L·ªói chi ti·∫øt khi thanh to√°n ƒë∆°n h√†ng: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("L·ªói khi thanh to√°n ƒë∆°n h√†ng: " + e.getMessage(), e);
        }
    }

    /**
     * Convert DonHang entity to DTO
     */
    private DonHangBanHangTaiQuayDTO convertToDTO(DonHang donHang) {
        return DonHangBanHangTaiQuayDTO.builder()
                .maDonHang(donHang.getMaDonHang())
                .tongTien(donHang.getTongTien())
                .diaChiGiaoHang(donHang.getDiaChiGiaoHang())
                .soDienThoai(donHang.getSoDienThoai())
                .phuongThucThanhToan(donHang.getPhuongThucThanhToan())
                .ghiChu(donHang.getGhiChu())
                .ngayDat(donHang.getNgayDat())
                .trangThai(donHang.getTrangThai())
                .chiTietDonHangs(donHang.getChiTietDonHangs() != null ? 
                    donHang.getChiTietDonHangs().stream()
                        .map(this::convertChiTietToDTO)
                        .collect(Collectors.toList()) : 
                    List.of())
                .build();
    }

    /**
     * Convert ChiTietDonHang entity to DTO
     */
    private ChiTietDonHangBanHangTaiQuayDTO convertChiTietToDTO(ChiTietDonHang chiTiet) {
        return ChiTietDonHangBanHangTaiQuayDTO.builder()
                .id(chiTiet.getId())
                .maDonHang(chiTiet.getDonHang().getMaDonHang())
                .maSKU(chiTiet.getBienTheSanPham() != null ? chiTiet.getBienTheSanPham().getMaSKU() : null)
                .maSKUPhuKien(chiTiet.getBienThePhuKien() != null ? chiTiet.getBienThePhuKien().getMaSKUPhuKien() : null)
                .imeiId(chiTiet.getImei() != null ? chiTiet.getImei().getId() : null)
                .imei(chiTiet.getImei() != null ? chiTiet.getImei().getImei() : null)
                .soLuong(chiTiet.getSoLuong())
                .gia(chiTiet.getGia())
                .loaiSanPham(chiTiet.getBienTheSanPham() != null ? "sanpham" : "phukien")
                .build();
    }
}
