

package com.example.datn.Service; // ƒê·ª´ng qu√™n gi·ªØ ƒë√∫ng package c·ªßa b·∫°n

import com.example.datn.Config.JwtUtil;

import com.example.datn.DTO.DonHang.ImeiResponseDTO;
import com.example.datn.DTO.DonHang.XacNhanDonHangRequestDTO;
import com.example.datn.DTO.TrangMuaHang.DonHangRequestDTO;
import com.example.datn.DTO.TrangMuaHang.DonHangResponseDTO;
import com.example.datn.Model.*;
import com.example.datn.Repository.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityNotFoundException;
import jakarta.persistence.PersistenceContext;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import jakarta.transaction.Transactional;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;


@Service
@RequiredArgsConstructor
public class DonHangService {
    private final DonHangRepository donHangRepo;
    private final ChiTietDonHangRepository chiTietDonHangRepo;
    private final GioHangRepository gioHangRepo;
    private final GioHangChiTietRepository gioHangChiTietRepo;
    private final UsersRepository usersRepo;
    private final UserVoucherRepository userVoucherRepository;
    private final BienTheSanPhamRepository bienTheRepo;
    private final BienThePhuKienRepository bienThePhuKienRepo; // ‚úÖ Th√™m repository cho bi·∫øn th·ªÉ ph·ª• ki·ªán
    private final JwtUtil jwtUtil;



//    @Transactional
//    public DonHangResponseDTO taoDonHang(String token, DonHangRequestDTO req) {
//        // 1. L·∫•y username t·ª´ token
//        String username = jwtUtil.extractUsername(token);
//
//        // 2. T√¨m user trong DB
//        Users user = usersRepo.findByUsername(username)
//                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user"));
//
//        // 3. L·∫•y gi·ªè h√†ng v√† c√°c item ƒë∆∞·ª£c ch·ªçn
//        List<GioHangChiTiet> allSelectedItems = new ArrayList<>();
//        if (req.getGioHangChiTietSanPhamIds() != null && !req.getGioHangChiTietSanPhamIds().isEmpty()) {
//            allSelectedItems.addAll(gioHangChiTietRepo.findAllById(req.getGioHangChiTietSanPhamIds()));
//        }
//        if (req.getGioHangChiTietPhuKienIds() != null && !req.getGioHangChiTietPhuKienIds().isEmpty()) {
//            allSelectedItems.addAll(gioHangChiTietRepo.findAllById(req.getGioHangChiTietPhuKienIds()));
//        }
//
//        if (allSelectedItems.isEmpty()) {
//            throw new RuntimeException("Kh√¥ng c√≥ s·∫£n ph·∫©m ho·∫∑c ph·ª• ki·ªán n√†o ƒë∆∞·ª£c ch·ªçn t·ª´ gi·ªè h√†ng.");
//        }
//
//        // 4. T·∫°o ƒë∆°n h√†ng m·ªõi
//        DonHang donHang = new DonHang();
//        donHang.setUser(user);
//        donHang.setDiaChiGiaoHang(
//                req.getDiaChiGiaoHang() != null ? req.getDiaChiGiaoHang() : user.getDiaChiGiaoHang()
//        );
//        donHang.setSoDienThoai(
//                req.getSoDienThoai() != null ? req.getSoDienThoai() : user.getSoDienThoai()
//        );
//        donHang.setPhuongThucThanhToan(req.getPhuongThucThanhToan());
//        donHang.setGhiChu(req.getGhiChu());
//        donHang.setTrangThai(0); // Set tr·∫°ng th√°i ban ƒë·∫ßu
//
//        // G·∫Øn voucher n·∫øu c√≥
//        UserVoucher userVoucher = null;
//        if (req.getUserVoucherId() != null) {
//            userVoucher = userVoucherRepository.findById(req.getUserVoucherId())
//                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y userVoucher"));
//            donHang.setUserVoucher(userVoucher);
//        }
//
//        // L∆∞u ƒë∆°n h√†ng tr∆∞·ªõc ƒë·ªÉ c√≥ ID
//        DonHang savedDonHang = donHangRepo.save(donHang);
//
//        // 5. T·∫°o chi ti·∫øt ƒë∆°n h√†ng v√† tr·ª´ t·ªìn kho (LOGIC ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T)
//        BigDecimal tongTien = BigDecimal.ZERO;
//        List<ChiTietDonHang> chiTietDonHangs = new ArrayList<>();
//
//        for (GioHangChiTiet ghct : allSelectedItems) {
//            // T√≠nh t·ªïng ti·ªÅn tr∆∞·ªõc khi v√†o v√≤ng l·∫∑p
//            tongTien = tongTien.add(ghct.getGia().multiply(BigDecimal.valueOf(ghct.getSoLuong())));
//
//            // ‚úÖ B·∫ÆT ƒê·∫¶U LOGIC M·ªöI: D√πng v√≤ng l·∫∑p ƒë·ªÉ "r√£" s·ªë l∆∞·ª£ng th√†nh nhi·ªÅu b·∫£n ghi
//            for (int i = 0; i < ghct.getSoLuong(); i++) {
//                ChiTietDonHang ctdh = new ChiTietDonHang();
//                ctdh.setDonHang(savedDonHang);
//                ctdh.setSoLuong(1); // QUAN TR·ªåNG: M·ªói b·∫£n ghi chi ti·∫øt gi·ªù ch·ªâ c√≥ s·ªë l∆∞·ª£ng l√† 1
//                ctdh.setGia(ghct.getGia()); // Gi√° cho m·ªôt s·∫£n ph·∫©m
//
//                // G√°n bi·∫øn th·ªÉ cho t·ª´ng chi ti·∫øt ƒë∆°n h√†ng ƒë∆∞·ª£c t·∫°o ra
//                if (ghct.getBienThe() != null) {
//                    ctdh.setBienTheSanPham(ghct.getBienThe());
//                } else if (ghct.getBienThePhuKien() != null) {
//                    ctdh.setBienThePhuKien(ghct.getBienThePhuKien());
//                }
//                chiTietDonHangs.add(ctdh);
//            }
//            // ‚úÖ K·∫æT TH√öC LOGIC M·ªöI
//
//            // Tr·ª´ t·ªìn kho t·ªïng s·ªë l∆∞·ª£ng m·ªôt l·∫ßn cho m·ªói lo·∫°i s·∫£n ph·∫©m/ph·ª• ki·ªán
//            if (ghct.getBienThe() != null) { // L√† s·∫£n ph·∫©m
//                BienTheSanPham bienThe = ghct.getBienThe();
//                if (bienThe.getSoLuong() < ghct.getSoLuong()) {
//                    throw new RuntimeException("S·∫£n ph·∫©m " + bienThe.getSanPham().getTenSanPham() + " kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn.");
//                }
//                bienThe.setSoLuong(bienThe.getSoLuong() - ghct.getSoLuong());
//                bienTheRepo.save(bienThe);
//            } else if (ghct.getBienThePhuKien() != null) { // L√† ph·ª• ki·ªán
//                BienThePhuKien bienThePhuKien = ghct.getBienThePhuKien();
//                if (bienThePhuKien.getSoLuong() < ghct.getSoLuong()) {
//                    throw new RuntimeException("Ph·ª• ki·ªán " + bienThePhuKien.getPhuKien().getTenPhuKien() + " kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn.");
//                }
//                bienThePhuKien.setSoLuong(bienThePhuKien.getSoLuong() - ghct.getSoLuong());
//                bienThePhuKienRepo.save(bienThePhuKien);
//            }
//        }
//
//        // L∆∞u t·∫•t c·∫£ c√°c chi ti·∫øt ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o
//        chiTietDonHangRepo.saveAll(chiTietDonHangs);
//
//
//        if (userVoucher != null) {
//            Voucher voucher = userVoucher.getVoucher();
//            BigDecimal giamGia = BigDecimal.ZERO;
//
//            // Ki·ªÉm tra ƒëi·ªÅu ki·ªán √°p d·ª•ng
//            if (voucher.getDieuKienGiam() == null || tongTien.compareTo(voucher.getDieuKienGiam()) >= 0) {
//
//                if (voucher.getLoaiGiam() == 0) {
//                    // Gi·∫£m s·ªë ti·ªÅn c·ªë ƒë·ªãnh
//                    giamGia = voucher.getGiaTriGiam();
//                } else if (voucher.getLoaiGiam() == 1) {
//                    // Gi·∫£m theo %
//                    // üëâ ·ªû DB giaTriGiam l∆∞u d·∫°ng 0.1 = 10%
//                    giamGia = tongTien.multiply(voucher.getGiaTriGiam());
//                }
//
//                // Gi·ªõi h·∫°n gi·∫£m t·ªëi ƒëa
//                if (voucher.getGiamToiDa() != null) {
//                    giamGia = giamGia.min(voucher.getGiamToiDa());
//                }
//
//                // Tr·ª´ s·ªë l·∫ßn s·ª≠ d·ª•ng
//                int newSoLanSuDung = userVoucher.getSoLanSuDung() - 1;
//                userVoucher.setSoLanSuDung(newSoLanSuDung);
//
//                // Tr·ª´ ti·ªÅn
//                tongTien = tongTien.subtract(giamGia);
//                if (tongTien.compareTo(BigDecimal.ZERO) < 0) {
//                    tongTien = BigDecimal.ZERO;
//                }
//            }
//        }
//
//        savedDonHang.setTongTien(tongTien);
//        donHangRepo.save(savedDonHang);
//
//        savedDonHang.setTongTien(tongTien);
//        donHangRepo.save(savedDonHang);
//
//        // 7. X√≥a c√°c chi ti·∫øt gi·ªè h√†ng ƒë√£ ƒë·∫∑t
//        gioHangChiTietRepo.deleteAll(allSelectedItems);
//
//        // 8. Build response DTO
//        return DonHangResponseDTO.builder()
//                .maDonHang(savedDonHang.getMaDonHang())
//                .trangThai(savedDonHang.getTrangThai())
//                .tongTien(savedDonHang.getTongTien())
//                .diaChiGiaoHang(savedDonHang.getDiaChiGiaoHang())
//                .soDienThoai(savedDonHang.getSoDienThoai())
//                .ngayDat(savedDonHang.getNgayDat())
//                .chiTietList(
//                        chiTietDonHangs.stream()
//                                .map(ct -> {
//                                    if (ct.getBienTheSanPham() != null) {
//                                        return DonHangResponseDTO.ChiTietDonHangDTO.builder()
//                                                .maSKU(ct.getBienTheSanPham().getMaSKU())
//                                                .tenSanPham(ct.getBienTheSanPham().getSanPham().getTenSanPham())
//                                                .soLuong(ct.getSoLuong())
//                                                .gia(ct.getGia())
//                                                .maChiTietDonHang(ct.getId()) // Tr·∫£ v·ªÅ ID cho m·ªói d√≤ng
//                                                .build();
//                                    } else {
//                                        return DonHangResponseDTO.ChiTietDonHangDTO.builder()
//                                                .maSKUPhuKien(ct.getBienThePhuKien().getMaSKUPhuKien())
//                                                .tenPhuKien(ct.getBienThePhuKien().getPhuKien().getTenPhuKien())
//                                                .soLuong(ct.getSoLuong())
//                                                .gia(ct.getGia())
//                                                .maChiTietDonHang(ct.getId()) // Tr·∫£ v·ªÅ ID cho m·ªói d√≤ng
//                                                .build();
//                                    }
//                                }).collect(Collectors.toList())
//                )
//                .build();
//    }

    @Transactional
    public DonHangResponseDTO taoDonHang(String token, DonHangRequestDTO req) {
        // 1. L·∫•y username t·ª´ token
        String username = jwtUtil.extractUsername(token);

        // 2. T√¨m user trong DB
        Users user = usersRepo.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user"));

        // 3. L·∫•y gi·ªè h√†ng v√† c√°c item ƒë∆∞·ª£c ch·ªçn
        List<GioHangChiTiet> allSelectedItems = new ArrayList<>();
        if (req.getGioHangChiTietSanPhamIds() != null && !req.getGioHangChiTietSanPhamIds().isEmpty()) {
            allSelectedItems.addAll(gioHangChiTietRepo.findAllById(req.getGioHangChiTietSanPhamIds()));
        }
        if (req.getGioHangChiTietPhuKienIds() != null && !req.getGioHangChiTietPhuKienIds().isEmpty()) {
            allSelectedItems.addAll(gioHangChiTietRepo.findAllById(req.getGioHangChiTietPhuKienIds()));
        }

        if (allSelectedItems.isEmpty()) {
            throw new RuntimeException("Kh√¥ng c√≥ s·∫£n ph·∫©m ho·∫∑c ph·ª• ki·ªán n√†o ƒë∆∞·ª£c ch·ªçn t·ª´ gi·ªè h√†ng.");
        }

        // 4. T·∫°o ƒë∆°n h√†ng m·ªõi
        DonHang donHang = new DonHang();
        donHang.setUser(user);

        // ‚úÖ B·ªî SUNG LOGIC L·∫§Y T√äN NG∆Ø·ªúI NH·∫¨N
        donHang.setTenNguoiNhan(
                req.getTenNguoiNhan() != null ? req.getTenNguoiNhan() : user.getHoTen() // Gi·∫£ ƒë·ªãnh user c√≥ getHoTen()
        );

        donHang.setDiaChiGiaoHang(
                req.getDiaChiGiaoHang() != null ? req.getDiaChiGiaoHang() : user.getDiaChiGiaoHang()
        );
        donHang.setSoDienThoai(
                req.getSoDienThoai() != null ? req.getSoDienThoai() : user.getSoDienThoai()
        );
        donHang.setPhuongThucThanhToan(req.getPhuongThucThanhToan());
        donHang.setGhiChu(req.getGhiChu());
        donHang.setTrangThai(0); // Set tr·∫°ng th√°i ban ƒë·∫ßu

        // G·∫Øn voucher n·∫øu c√≥
        UserVoucher userVoucher = null;
        if (req.getUserVoucherId() != null) {
            userVoucher = userVoucherRepository.findById(req.getUserVoucherId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y userVoucher"));
            donHang.setUserVoucher(userVoucher);
        }

        // L∆∞u ƒë∆°n h√†ng tr∆∞·ªõc ƒë·ªÉ c√≥ ID
        DonHang savedDonHang = donHangRepo.save(donHang);

        // 5. T·∫°o chi ti·∫øt ƒë∆°n h√†ng v√† tr·ª´ t·ªìn kho (LOGIC ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T)
        BigDecimal tongTien = BigDecimal.ZERO;
        List<ChiTietDonHang> chiTietDonHangs = new ArrayList<>();

        for (GioHangChiTiet ghct : allSelectedItems) {
            // T√≠nh t·ªïng ti·ªÅn tr∆∞·ªõc khi v√†o v√≤ng l·∫∑p
            tongTien = tongTien.add(ghct.getGia().multiply(BigDecimal.valueOf(ghct.getSoLuong())));

            // ‚úÖ B·∫ÆT ƒê·∫¶U LOGIC M·ªöI: D√πng v√≤ng l·∫∑p ƒë·ªÉ "r√£" s·ªë l∆∞·ª£ng th√†nh nhi·ªÅu b·∫£n ghi
            for (int i = 0; i < ghct.getSoLuong(); i++) {
                ChiTietDonHang ctdh = new ChiTietDonHang();
                ctdh.setDonHang(savedDonHang);
                ctdh.setSoLuong(1); // QUAN TR·ªåNG: M·ªói b·∫£n ghi chi ti·∫øt gi·ªù ch·ªâ c√≥ s·ªë l∆∞·ª£ng l√† 1
                ctdh.setGia(ghct.getGia()); // Gi√° cho m·ªôt s·∫£n ph·∫©m

                // G√°n bi·∫øn th·ªÉ cho t·ª´ng chi ti·∫øt ƒë∆°n h√†ng ƒë∆∞·ª£c t·∫°o ra
                if (ghct.getBienThe() != null) {
                    ctdh.setBienTheSanPham(ghct.getBienThe());
                } else if (ghct.getBienThePhuKien() != null) {
                    ctdh.setBienThePhuKien(ghct.getBienThePhuKien());
                }
                chiTietDonHangs.add(ctdh);
            }
            // ‚úÖ K·∫æT TH√öC LOGIC M·ªöI

            // Tr·ª´ t·ªìn kho t·ªïng s·ªë l∆∞·ª£ng m·ªôt l·∫ßn cho m·ªói lo·∫°i s·∫£n ph·∫©m/ph·ª• ki·ªán
            if (ghct.getBienThe() != null) { // L√† s·∫£n ph·∫©m
                BienTheSanPham bienThe = ghct.getBienThe();
                if (bienThe.getSoLuong() < ghct.getSoLuong()) {
                    throw new RuntimeException("S·∫£n ph·∫©m " + bienThe.getSanPham().getTenSanPham() + " kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn.");
                }
                bienThe.setSoLuong(bienThe.getSoLuong() - ghct.getSoLuong());
                bienTheRepo.save(bienThe);
            } else if (ghct.getBienThePhuKien() != null) { // L√† ph·ª• ki·ªán
                BienThePhuKien bienThePhuKien = ghct.getBienThePhuKien();
                if (bienThePhuKien.getSoLuong() < ghct.getSoLuong()) {
                    throw new RuntimeException("Ph·ª• ki·ªán " + bienThePhuKien.getPhuKien().getTenPhuKien() + " kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn.");
                }
                bienThePhuKien.setSoLuong(bienThePhuKien.getSoLuong() - ghct.getSoLuong());
                bienThePhuKienRepo.save(bienThePhuKien);
            }
        }

        // L∆∞u t·∫•t c·∫£ c√°c chi ti·∫øt ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o
        chiTietDonHangRepo.saveAll(chiTietDonHangs);


        if (userVoucher != null) {
            Voucher voucher = userVoucher.getVoucher();
            BigDecimal giamGia = BigDecimal.ZERO;

            // Ki·ªÉm tra ƒëi·ªÅu ki·ªán √°p d·ª•ng
            if (voucher.getDieuKienGiam() == null || tongTien.compareTo(voucher.getDieuKienGiam()) >= 0) {

                if (voucher.getLoaiGiam() == 0) {
                    // Gi·∫£m s·ªë ti·ªÅn c·ªë ƒë·ªãnh
                    giamGia = voucher.getGiaTriGiam();
                } else if (voucher.getLoaiGiam() == 1) {
                    // Gi·∫£m theo %
                    // üëâ ·ªû DB giaTriGiam l∆∞u d·∫°ng 0.1 = 10%
                    giamGia = tongTien.multiply(voucher.getGiaTriGiam());
                }

                // Gi·ªõi h·∫°n gi·∫£m t·ªëi ƒëa
                if (voucher.getGiamToiDa() != null) {
                    giamGia = giamGia.min(voucher.getGiamToiDa());
                }

                // Tr·ª´ s·ªë l·∫ßn s·ª≠ d·ª•ng
                int newSoLanSuDung = userVoucher.getSoLanSuDung() - 1;
                userVoucher.setSoLanSuDung(newSoLanSuDung);

                // Tr·ª´ ti·ªÅn
                tongTien = tongTien.subtract(giamGia);
                if (tongTien.compareTo(BigDecimal.ZERO) < 0) {
                    tongTien = BigDecimal.ZERO;
                }
            }
        }

        savedDonHang.setTongTien(tongTien);
        donHangRepo.save(savedDonHang);

        savedDonHang.setTongTien(tongTien);
        donHangRepo.save(savedDonHang);

        // 7. X√≥a c√°c chi ti·∫øt gi·ªè h√†ng ƒë√£ ƒë·∫∑t
        gioHangChiTietRepo.deleteAll(allSelectedItems);

        // 8. Build response DTO
        // (B·∫°n c≈©ng n√™n th√™m tenNguoiNhan v√†o DonHangResponseDTO n·∫øu mu·ªën)
        return DonHangResponseDTO.builder()
                .maDonHang(savedDonHang.getMaDonHang())
                .trangThai(savedDonHang.getTrangThai())
                .tongTien(savedDonHang.getTongTien())
                .tenNguoiNhan(savedDonHang.getTenNguoiNhan()) // ‚úÖ B·ªî SUNG TR·∫¢ V·ªÄ
                .diaChiGiaoHang(savedDonHang.getDiaChiGiaoHang())
                .soDienThoai(savedDonHang.getSoDienThoai())
                .ngayDat(savedDonHang.getNgayDat())
                .chiTietList(
                        chiTietDonHangs.stream()
                                .map(ct -> {
                                    if (ct.getBienTheSanPham() != null) {
                                        return DonHangResponseDTO.ChiTietDonHangDTO.builder()
                                                .maSKU(ct.getBienTheSanPham().getMaSKU())
                                                .tenSanPham(ct.getBienTheSanPham().getSanPham().getTenSanPham())
                                                .soLuong(ct.getSoLuong())
                                                .gia(ct.getGia())
                                                .maChiTietDonHang(ct.getId()) // Tr·∫£ v·ªÅ ID cho m·ªói d√≤ng
                                                .build();
                                    } else {
                                        return DonHangResponseDTO.ChiTietDonHangDTO.builder()
                                                .maSKUPhuKien(ct.getBienThePhuKien().getMaSKUPhuKien())
                                                .tenPhuKien(ct.getBienThePhuKien().getPhuKien().getTenPhuKien())
                                                .soLuong(ct.getSoLuong())
                                                .gia(ct.getGia())
                                                .maChiTietDonHang(ct.getId()) // Tr·∫£ v·ªÅ ID cho m·ªói d√≤ng
                                                .build();
                                    }
                                }).collect(Collectors.toList())
                )
                .build();
    }

    private final DonHangRepository donHangRepository;


    public List<DonHangResponseDTO> getDonHangTheoTrangThai(Integer trangThai) {
        // G·ªçi ƒë·∫øn ph∆∞∆°ng th·ª©c repository m·ªõi
        List<DonHang> donHangList = donHangRepository.findByTrangThaiWithDetails(trangThai);

        if (donHangList.isEmpty()) {
            return Collections.emptyList();
        }

        // T√°i s·ª≠ d·ª•ng logic chuy·ªÉn ƒë·ªïi DonHang -> DTO c√≥ s·∫µn
        return donHangList.stream()
                .map(this::buildResponseDTOFromDonHang)
                .collect(Collectors.toList());
    }


    public List<DonHangResponseDTO> getDonHangCuaUserTheoTrangThai(String username, Integer trangThai) {
        List<DonHang> donHangList = donHangRepository.findByUserAndTrangThaiWithDetails(username, trangThai);

        if (donHangList.isEmpty()) {
            return Collections.emptyList();
        }

        return donHangList.stream()
                .map(this::buildResponseDTOFromDonHang)
                .collect(Collectors.toList());
    }



    /**
     * H√†m helper ch·ªãu tr√°ch nhi·ªám chuy·ªÉn ƒë·ªïi m·ªôt DonHang Entity sang DonHangResponseDTO.
     */
    private DonHangResponseDTO buildResponseDTOFromDonHang(DonHang donHang) {

        // Chuy·ªÉn ƒë·ªïi danh s√°ch ChiTietDonHang entity th√†nh danh s√°ch ChiTietDonHangDTO
        List<DonHangResponseDTO.ChiTietDonHangDTO> chiTietDTOList = donHang.getChiTietDonHangs().stream().map(ctdh -> {
            DonHangResponseDTO.ChiTietDonHangDTO.ChiTietDonHangDTOBuilder builder = DonHangResponseDTO.ChiTietDonHangDTO.builder()
                    .soLuong(ctdh.getSoLuong())
                    .gia(ctdh.getGia())
                    .maChiTietDonHang(ctdh.getId()); // Gi·∫£ s·ª≠ t√™n tr∆∞·ªùng ID trong Entity c·ªßa b·∫°n l√† 'id'


            // ‚úÖ B·ªî SUNG LOGIC G√ÅN IMEI T·∫†I ƒê√ÇY
            if (ctdh.getImei() != null) {
                builder.imei(ctdh.getImei().getImei());
            }

            // ‚úÖ X·ª≠ l√Ω Bi·∫øn Th·ªÉ S·∫£n Ph·∫©m
            if (ctdh.getBienTheSanPham() != null) {
                BienTheSanPham bts = ctdh.getBienTheSanPham();
                String thuocTinhFormatted = formatThuocTinhSanPham(bts.getThuocTinhList()); // L·∫•y thu·ªôc t√≠nh s·∫£n ph·∫©m




                builder.maSKU(bts.getMaSKU())
                        .tenSanPham(bts.getSanPham().getTenSanPham())
                        .thuocTinh(thuocTinhFormatted); // G√°n thu·ªôc t√≠nh ƒë√£ format

                // ‚úÖ X·ª≠ l√Ω Bi·∫øn Th·ªÉ Ph·ª• Ki·ªán
            } else if (ctdh.getBienThePhuKien() != null) {
                BienThePhuKien btpk = ctdh.getBienThePhuKien();
                String thuocTinhFormatted = formatThuocTinhPhuKien(btpk.getThuocTinhPhuKienList()); // L·∫•y thu·ªôc t√≠nh ph·ª• ki·ªán

                builder.maSKUPhuKien(btpk.getMaSKUPhuKien())
                        .tenPhuKien(btpk.getPhuKien().getTenPhuKien())
                        .thuocTinh(thuocTinhFormatted); // G√°n thu·ªôc t√≠nh ƒë√£ format
            }
            return builder.build();
        }).collect(Collectors.toList());

        // ... Ph·∫ßn x·ª≠ l√Ω voucher v√† t√≠nh t·ªïng ti·ªÅn gi·ªØ nguy√™n ...
        DonHangResponseDTO.VoucherDTO voucherDTO = null;
        BigDecimal soTienGiam = BigDecimal.ZERO;

//        if (donHang.getUserVoucher() != null) {
//            Voucher v = donHang.getUserVoucher().getVoucher();
//            voucherDTO = DonHangResponseDTO.VoucherDTO.builder()
//                    .voucherId(v.getId()).maVoucher(v.getCodeVoucher())
//                    .giaTriGiam(v.getGiaTriGiam()).loaiGiam(v.getLoaiGiam() == 1 ? "PERCENT" : "AMOUNT")
//                    .build();
//            soTienGiam = tinhTienGiam(donHang.getTongTien().add(soTienGiam), v);
//        }

        if (donHang.getUserVoucher() != null) {
            Voucher v = donHang.getUserVoucher().getVoucher();
            voucherDTO = DonHangResponseDTO.VoucherDTO.builder()
                    .voucherId(v.getId())
                    .maVoucher(v.getCodeVoucher())
                    .tenVoucher(v.getTenVoucher())
                    .moTa(v.getMoTa())
                    .soLanSuDung(v.getSoLanSuDung())
                    .giaTriGiam(v.getGiaTriGiam())
                    .loaiGiam(v.getLoaiGiam() == 1 ? "Gi·∫£m theo ph·∫ßn trƒÉm" : "Gi·∫£m s·ªë ti·ªÅn")
                    .dieuKienGiam(v.getDieuKienGiam())
                    .giamToiDa(v.getGiamToiDa())
                    .ngayBatDau(v.getNgayBatDau())
                    .ngayKetThuc(v.getNgayKetThuc())

                    .build();

            soTienGiam = tinhTienGiam(donHang.getTongTien().add(soTienGiam), v);
        }

        BigDecimal tongTienTruocGiam = donHang.getTongTien().add(soTienGiam);

        // X√¢y d·ª±ng DTO cu·ªëi c√πng
        return DonHangResponseDTO.builder()
                .maDonHang(donHang.getMaDonHang())
                .trangThai(donHang.getTrangThai())
                .tongTien(donHang.getTongTien())
                .tongTienTruocGiam(tongTienTruocGiam)
                .soTienGiam(soTienGiam)
                .diaChiGiaoHang(donHang.getDiaChiGiaoHang())
                .soDienThoai(donHang.getSoDienThoai())
                .ngayDat(donHang.getNgayDat())
                .tenKhachHang(donHang.getUser().getHoTen())
                .tenNguoiNhan(donHang.getTenNguoiNhan())
                .phuongThucThanhToan(donHang.getPhuongThucThanhToan()) // ‚úÖ B·ªî SUNG D√íNG N√ÄY
                .voucher(voucherDTO)
                .chiTietList(chiTietDTOList)
                .build();
    }

    // H√†m helper t√≠nh ti·ªÅn gi·∫£m gi√°
    private BigDecimal tinhTienGiam(BigDecimal tongTien, Voucher voucher) {
        if (voucher == null) return BigDecimal.ZERO;
        if (tongTien.compareTo(voucher.getDieuKienGiam()) < 0) return BigDecimal.ZERO;
        if (voucher.getLoaiGiam() == 1) { // Gi·∫£m theo %
            BigDecimal tienGiam = tongTien.multiply(voucher.getGiaTriGiam().divide(BigDecimal.valueOf(100)));
            return tienGiam.compareTo(voucher.getGiamToiDa()) > 0 ? voucher.getGiamToiDa() : tienGiam;
        } else {
            return voucher.getGiaTriGiam();
        }
    }

    // ‚úÖ H√ÄM HELPER M·ªöI: Format thu·ªôc t√≠nh cho S·∫£n Ph·∫©m Ch√≠nh
    private String formatThuocTinhSanPham(List<ThuocTinh> thuocTinhs) {
        if (thuocTinhs == null || thuocTinhs.isEmpty()) {
            return null;
        }
        // Format theo y√™u c·∫ßu: tenThuocTinh : tenThuocTinhBienThe
        return thuocTinhs.stream()
                .map(tt -> tt.getTenThuocTinh() + ": " + tt.getTenThuocTinhBienThe())
                .collect(Collectors.joining(", ")); // V√≠ d·ª•: "M√†u: ƒêen, Dung l∆∞·ª£ng: 256GB"
    }

    // ‚úÖ H√ÄM HELPER M·ªöI: Format thu·ªôc t√≠nh cho Ph·ª• Ki·ªán
    private String formatThuocTinhPhuKien(List<ThuocTinhPhuKien> thuocTinhs) {
        if (thuocTinhs == null || thuocTinhs.isEmpty()) {
            return null;
        }
        // Format theo y√™u c·∫ßu: tenThuocTinh: giaTriThuocTinh
        return thuocTinhs.stream()
                .map(tt -> tt.getTenThuocTinh() + ": " + tt.getGiaTriThuocTinh())
                .collect(Collectors.joining(", ")); // V√≠ d·ª•: "Lo·∫°i d√¢y: V·∫£i d√π, M√†u s·∫Øc: Xanh"
    }















    private final ChiTietDonHangRepository chiTietDonHangRepository;

    private final IMEIRepository imeiRepository ;




//    @Transactional
//    public void xacNhanDonHang(Integer maDonHang, List<XacNhanDonHangRequestDTO.ChiTietDonHangIMEIDTO> items) {
//        // 1. T√¨m ƒë∆°n h√†ng, n·∫øu kh√¥ng th·∫•y ho·∫∑c tr·∫°ng th√°i kh√¥ng ph·∫£i "Ch·ªù x√°c nh·∫≠n" -> b√°o l·ªói
//        DonHang donHang = donHangRepository.findById(maDonHang)
//                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #" + maDonHang));
//
//        if (!"Ch·ªù x√°c nh·∫≠n".equals(donHang.getTrangThai())) {
//            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i 'Ch·ªù x√°c nh·∫≠n'.");
//        }
//
//        // 2. L·∫∑p qua t·ª´ng item (s·∫£n ph·∫©m/ph·ª• ki·ªán c√≥ IMEI)
//        for (XacNhanDonHangRequestDTO.ChiTietDonHangIMEIDTO itemDTO : items) {
//
//            // T√¨m chi ti·∫øt ƒë∆°n h√†ng t∆∞∆°ng ·ª©ng
//            ChiTietDonHang chiTiet = chiTietDonHangRepository.findById(itemDTO.getChiTietDonHangId())
//                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng ID: " + itemDTO.getChiTietDonHangId()));
//
//            // T√¨m IMEI trong kho
//            IMEI imeiEntity = imeiRepository.findByImei(itemDTO.getImei())
//                    .orElseThrow(() -> new EntityNotFoundException("IMEI '" + itemDTO.getImei() + "' kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng."));
//
//            // 3. Th·ª±c hi·ªán c√°c b∆∞·ªõc ki·ªÉm tra quan tr·ªçng
//            // Ki·ªÉm tra IMEI c√≥ ƒëang ·ªü tr·∫°ng th√°i "Trong kho" (trangThai=1) kh√¥ng?
//            if (imeiEntity.getTrangThai() != 1) {
//                throw new IllegalStateException("IMEI '" + imeiEntity.getImei() + "' ƒë√£ ƒë∆∞·ª£c b√°n ho·∫∑c ƒëang ·ªü tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
//            }
//
//            // 4. Ki·ªÉm tra xem IMEI c√≥ kh·ªõp v·ªõi s·∫£n ph·∫©m ho·∫∑c ph·ª• ki·ªán trong chi ti·∫øt ƒë∆°n h√†ng kh√¥ng
//            // Logic ƒë√£ s·ª≠a: Truy c·∫≠p qua c√°c ƒë·ªëi t∆∞·ª£ng entity ƒë∆∞·ª£c √°nh x·∫°
//            boolean isProductItem = chiTiet.getBienTheSanPham() != null;
//            boolean isAccessoryItem = chiTiet.getBienThePhuKien() != null;
//
//            if (isProductItem) { // Chi ti·∫øt ƒë∆°n h√†ng l√† s·∫£n ph·∫©m
//                if (imeiEntity.getBienTheSanPham() == null || !imeiEntity.getBienTheSanPham().getMaSKU().equals(chiTiet.getBienTheSanPham().getMaSKU())) {
//                    throw new IllegalArgumentException("IMEI '" + imeiEntity.getImei() + "' kh√¥ng thu·ªôc v·ªÅ s·∫£n ph·∫©m c√≥ SKU: " + chiTiet.getBienTheSanPham().getMaSKU());
//                }
//            } else if (isAccessoryItem) { // Chi ti·∫øt ƒë∆°n h√†ng l√† ph·ª• ki·ªán
//                if (imeiEntity.getBienThePhuKien() == null || !imeiEntity.getBienThePhuKien().getMaSKUPhuKien().equals(chiTiet.getBienThePhuKien().getMaSKUPhuKien())) {
//                    throw new IllegalArgumentException("IMEI '" + imeiEntity.getImei() + "' kh√¥ng thu·ªôc v·ªÅ ph·ª• ki·ªán c√≥ SKU: " + chiTiet.getBienThePhuKien().getMaSKUPhuKien());
//                }
//            } else {
//                // Tr∆∞·ªùng h·ª£p chi ti·∫øt ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i s·∫£n ph·∫©m c≈©ng kh√¥ng ph·∫£i ph·ª• ki·ªán)
//                throw new IllegalArgumentException("Chi ti·∫øt ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá.");
//            }
//
//            // 5. M·ªçi th·ª© h·ª£p l·ªá -> G√°n IMEI v√†o chi ti·∫øt ƒë∆°n h√†ng
//            chiTiet.setImei(imeiEntity);
//            chiTietDonHangRepository.save(chiTiet);
//
//            // 6. C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa IMEI th√†nh "ƒê√£ b√°n" (trangThai=0)
//            imeiEntity.setTrangThai(0);
//            imeiRepository.save(imeiEntity);
//        }
//
//        // 7. Sau khi x·ª≠ l√Ω h·∫øt c√°c IMEI, c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa to√†n b·ªô ƒë∆°n h√†ng
//        donHang.setTrangThai(1);
//        donHangRepository.save(donHang);
//    }



    // File: DonHangService.java

    @Transactional
    public void xacNhanDonHang(Integer maDonHang, List<XacNhanDonHangRequestDTO.ChiTietDonHangIMEIDTO> items) {
        // 1. T√¨m ƒë∆°n h√†ng
        DonHang donHang = donHangRepository.findById(maDonHang)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #" + maDonHang));

        // ‚úÖ THAY ƒê·ªîI QUAN TR·ªåNG T·∫†I ƒê√ÇY
        // So s√°nh tr·∫°ng th√°i v·ªõi S·ªê 0, thay v√¨ chu·ªói "Ch·ªù x√°c nh·∫≠n"
        if (donHang.getTrangThai() != 0) { // N·∫øu tr·∫°ng th√°i KH√îNG PH·∫¢I l√† 0 (Ch·ªù x√°c nh·∫≠n)
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i 'Ch·ªù x√°c nh·∫≠n'.");
        }

        // 2. L·∫∑p qua t·ª´ng item (s·∫£n ph·∫©m/ph·ª• ki·ªán c√≥ IMEI)
        for (XacNhanDonHangRequestDTO.ChiTietDonHangIMEIDTO itemDTO : items) {

            // T√¨m chi ti·∫øt ƒë∆°n h√†ng t∆∞∆°ng ·ª©ng
            ChiTietDonHang chiTiet = chiTietDonHangRepository.findById(itemDTO.getChiTietDonHangId())
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng ID: " + itemDTO.getChiTietDonHangId()));

            // T√¨m IMEI trong kho
            IMEI imeiEntity = imeiRepository.findByImei(itemDTO.getImei())
                    .orElseThrow(() -> new EntityNotFoundException("IMEI '" + itemDTO.getImei() + "' kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng."));

            // 3. Ki·ªÉm tra IMEI c√≥ ƒëang ·ªü tr·∫°ng th√°i "Trong kho" (trangThai=1) kh√¥ng?
            if (imeiEntity.getTrangThai() != 1) {
                throw new IllegalStateException("IMEI '" + imeiEntity.getImei() + "' ƒë√£ ƒë∆∞·ª£c b√°n ho·∫∑c ƒëang ·ªü tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.");
            }

            // 4. Ki·ªÉm tra xem IMEI c√≥ kh·ªõp v·ªõi s·∫£n ph·∫©m ho·∫∑c ph·ª• ki·ªán kh√¥ng
            boolean isProductItem = chiTiet.getBienTheSanPham() != null;
            boolean isAccessoryItem = chiTiet.getBienThePhuKien() != null;

            if (isProductItem) {
                if (imeiEntity.getBienTheSanPham() == null || !imeiEntity.getBienTheSanPham().getMaSKU().equals(chiTiet.getBienTheSanPham().getMaSKU())) {
                    throw new IllegalArgumentException("IMEI '" + imeiEntity.getImei() + "' kh√¥ng thu·ªôc v·ªÅ s·∫£n ph·∫©m c√≥ SKU: " + chiTiet.getBienTheSanPham().getMaSKU());
                }
            } else if (isAccessoryItem) {
                if (imeiEntity.getBienThePhuKien() == null || !imeiEntity.getBienThePhuKien().getMaSKUPhuKien().equals(chiTiet.getBienThePhuKien().getMaSKUPhuKien())) {
                    throw new IllegalArgumentException("IMEI '" + imeiEntity.getImei() + "' kh√¥ng thu·ªôc v·ªÅ ph·ª• ki·ªán c√≥ SKU: " + chiTiet.getBienThePhuKien().getMaSKUPhuKien());
                }
            } else {
                throw new IllegalArgumentException("Chi ti·∫øt ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá.");
            }

            // 5. G√°n IMEI v√†o chi ti·∫øt ƒë∆°n h√†ng
            chiTiet.setImei(imeiEntity);
            chiTietDonHangRepository.save(chiTiet);

            // 6. C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa IMEI th√†nh "ƒê√£ b√°n" (trangThai=0)
            imeiEntity.setTrangThai(0);
            imeiRepository.save(imeiEntity);
        }

        // 7. C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ƒë∆°n h√†ng th√†nh "ƒê√£ x√°c nh·∫≠n" (trangThai=1)
        donHang.setTrangThai(1); // B√¢y gi·ªù d√≤ng n√†y s·∫Ω ƒë∆∞·ª£c th·ª±c thi
        donHangRepository.save(donHang);
    }

    @PersistenceContext
    private EntityManager entityManager;
    public List<ImeiResponseDTO> findAvailableImeisBySku(String sku) {
        // G·ªçi Stored Procedure ƒë√£ t·∫°o trong database
        @SuppressWarnings("unchecked")
        List<Object[]> results = entityManager
                .createNativeQuery("EXEC sp_GetProductInfoAndAvailableImeis @SKU = :sku")
                .setParameter("sku", sku)
                .getResultList();

        // Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ d·∫°ng Object[] sang List<ImeiResponseDTO>
        return results.stream()
                .map(result -> new ImeiResponseDTO(
                        (String) result[0], // tenSanPham
                        (String) result[1]  // imei
                ))
                .collect(Collectors.toList());
    }





    // Trong file: DonHangService.java
// ... (th√™m v√†o cu·ªëi file, tr∆∞·ªõc d·∫•u } cu·ªëi c√πng)

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng t·ª´ "ƒêang giao h√†ng" (1) sang "Ho√†n th√†nh" (2).
     * @param maDonHang ID c·ªßa ƒë∆°n h√†ng c·∫ßn c·∫≠p nh·∫≠t.
     */
    @Transactional
    public void hoanThanhDonHang(Integer maDonHang) {
        // 1. T√¨m ƒë∆°n h√†ng theo ID
        DonHang donHang = donHangRepository.findById(maDonHang)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #" + maDonHang));

        // 2. Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i ph·∫£i l√† "ƒêang giao h√†ng" (1)
        if (donHang.getTrangThai() != 1) {
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ ho√†n th√†nh ƒë∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i 'ƒêang giao h√†ng'.");
        }

        // 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i sang "Ho√†n th√†nh" (2) v√† l∆∞u l·∫°i
        donHang.setTrangThai(2);
        donHangRepository.save(donHang);
    }

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng t·ª´ "ƒêang giao h√†ng" (1) sang "ƒê√£ h·ªßy" (3).
     * @param maDonHang ID c·ªßa ƒë∆°n h√†ng c·∫ßn h·ªßy.
     */
    @Transactional
    public void huyDonHangKhiDangGiao(Integer maDonHang) {
        // 1. T√¨m ƒë∆°n h√†ng theo ID
        DonHang donHang = donHangRepository.findById(maDonHang)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #" + maDonHang));

        // 2. Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i ph·∫£i l√† "ƒêang giao h√†ng" (1)
        if (donHang.getTrangThai() != 1) {
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i 'ƒêang giao h√†ng'.");
        }

        // 3. Ho√†n l·∫°i s·ªë l∆∞·ª£ng t·ªìn kho cho c√°c s·∫£n ph·∫©m/ph·ª• ki·ªán trong ƒë∆°n h√†ng
        for (ChiTietDonHang ctdh : donHang.getChiTietDonHangs()) {
            // Ho√†n l·∫°i t·ªìn kho cho s·∫£n ph·∫©m
            if (ctdh.getBienTheSanPham() != null) {
                BienTheSanPham bts = ctdh.getBienTheSanPham();
                bts.setSoLuong(bts.getSoLuong() + ctdh.getSoLuong()); // ctdh.getSoLuong() lu√¥n l√† 1
                bienTheRepo.save(bts);
            }
            // Ho√†n l·∫°i t·ªìn kho cho ph·ª• ki·ªán
            else if (ctdh.getBienThePhuKien() != null) {
                BienThePhuKien btpk = ctdh.getBienThePhuKien();
                btpk.setSoLuong(btpk.getSoLuong() + ctdh.getSoLuong());
                bienThePhuKienRepo.save(btpk);
            }

            // Ho√†n l·∫°i tr·∫°ng th√°i IMEI th√†nh "Trong kho" (1)
            if (ctdh.getImei() != null) {
                IMEI imei = ctdh.getImei();
                imei.setTrangThai(1); // 1 = Trong kho
                imeiRepository.save(imei);
            }
        }

        // 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i sang "ƒê√£ h·ªßy" (3) v√† l∆∞u l·∫°i
        donHang.setTrangThai(3);
        donHangRepository.save(donHang);
    }



    // Trong file: DonHangService.java
// ... (th√™m v√†o cu·ªëi file, tr∆∞·ªõc d·∫•u } cu·ªëi c√πng)

    /**
     * H·ªßy m·ªôt ƒë∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i "Ch·ªù x√°c nh·∫≠n" (0).
     * S·∫Ω ho√†n l·∫°i s·ªë l∆∞·ª£ng t·ªìn kho v√† s·ªë l·∫ßn s·ª≠ d·ª•ng voucher (n·∫øu c√≥).
     * @param maDonHang ID c·ªßa ƒë∆°n h√†ng c·∫ßn h·ªßy.
     */
    @Transactional
    public void huyDonHangChoXacNhan(Integer maDonHang) {
        // 1. T√¨m ƒë∆°n h√†ng
        DonHang donHang = donHangRepository.findById(maDonHang)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #" + maDonHang));

        // 2. Ki·ªÉm tra tr·∫°ng th√°i ph·∫£i l√† "Ch·ªù x√°c nh·∫≠n" (0)
        if (donHang.getTrangThai() != 0) {
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i 'Ch·ªù x√°c nh·∫≠n'.");
        }

        // 3. Ho√†n l·∫°i s·ªë l∆∞·ª£ng t·ªìn kho cho c√°c s·∫£n ph·∫©m/ph·ª• ki·ªán
        for (ChiTietDonHang ctdh : donHang.getChiTietDonHangs()) {
            if (ctdh.getBienTheSanPham() != null) {
                BienTheSanPham bts = ctdh.getBienTheSanPham();
                bts.setSoLuong(bts.getSoLuong() + ctdh.getSoLuong()); // ctdh.getSoLuong() l√† 1
                bienTheRepo.save(bts);
            } else if (ctdh.getBienThePhuKien() != null) {
                BienThePhuKien btpk = ctdh.getBienThePhuKien();
                btpk.setSoLuong(btpk.getSoLuong() + ctdh.getSoLuong());
                bienThePhuKienRepo.save(btpk);
            }
            // Kh√¥ng c·∫ßn x·ª≠ l√Ω IMEI v√¨ ·ªü tr·∫°ng th√°i n√†y IMEI ch∆∞a ƒë∆∞·ª£c g√°n
        }

        // 4. Ho√†n l·∫°i l∆∞·ª£t s·ª≠ d·ª•ng voucher n·∫øu ƒë∆°n h√†ng c√≥ √°p d·ª•ng
        if (donHang.getUserVoucher() != null) {
            UserVoucher userVoucher = donHang.getUserVoucher();
            // C·ªông l·∫°i 1 l∆∞·ª£t s·ª≠ d·ª•ng
            userVoucher.setSoLanSuDung(userVoucher.getSoLanSuDung() + 1);
            userVoucherRepository.save(userVoucher);
        }

        // 5. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng sang "ƒê√£ h·ªßy" (3)
        donHang.setTrangThai(3);
        donHangRepository.save(donHang);
    }
}
